# HydraFlow-X Ultra-Low Latency DeFi HFT Engine
# Universal Build System for Apple Silicon + Intel Macs
# Optimized for sub-nanosecond latency trading

cmake_minimum_required(VERSION 3.20)
project(HydraFlow-X VERSION 1.0.0 LANGUAGES CXX)

# Set C++23 standard for bleeding-edge features
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Architecture detection and optimization
if(NOT DEFINED HFX_TARGET_ARCH)
    if(CMAKE_OSX_ARCHITECTURES)
        set(HFX_TARGET_ARCH ${CMAKE_OSX_ARCHITECTURES})
    else()
        set(HFX_TARGET_ARCH ${CMAKE_SYSTEM_PROCESSOR})
    endif()
endif()

message(STATUS "üéØ HydraFlow-X Target Architecture: ${HFX_TARGET_ARCH}")
message(STATUS "üîß Build Type: ${CMAKE_BUILD_TYPE}")

# Enable Link-Time Optimization (LTO) for release builds
if(CMAKE_BUILD_TYPE MATCHES "Release")
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
    message(STATUS "üöÄ Link-Time Optimization enabled")
endif()

# Ultra-aggressive optimization flags for HFT
if(APPLE)
    # Base optimization flags
    set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fomit-frame-pointer")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -finline-functions -funroll-loops")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fno-exceptions -fno-rtti")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -flto")
    
    # Architecture-specific optimizations
    if(HFX_TARGET_ARCH MATCHES "arm64" OR CMAKE_OSX_ARCHITECTURES MATCHES "arm64")
        message(STATUS "üçé Applying Apple Silicon (ARM64) optimizations")
        
        # Apple Silicon specific optimizations  
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcpu=apple-m1 -mtune=apple-m1")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvectorize")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -falign-functions=32 -falign-loops=32")
        
        # ARM64 memory optimizations
        add_compile_definitions(HFX_APPLE_SILICON=1)
        add_compile_definitions(HFX_ARM64_NEON=1)
        
    elseif(HFX_TARGET_ARCH MATCHES "x86_64" OR CMAKE_OSX_ARCHITECTURES MATCHES "x86_64")
        message(STATUS "‚ö° Applying Intel x86_64 optimizations")
        
        # Intel specific optimizations
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native -mtune=native")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2 -mfma -msse4.2")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfpmath=sse")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -falign-functions=16 -falign-loops=16")
        
        # x86_64 specific optimizations
        add_compile_definitions(HFX_INTEL_X86_64=1)
        add_compile_definitions(HFX_AVX2_SUPPORT=1)
    endif()
    
    # Common Apple optimizations
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-stack-protector -fno-plt")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ffast-math -fno-math-errno")
    
    # HFT-specific optimizations
    add_compile_definitions(HFX_APPLE_PLATFORM=1)
    add_compile_definitions(HFX_HIGH_RESOLUTION_TIMING=1)
    
else()
    # Generic optimization flags for non-Apple platforms
    set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fomit-frame-pointer")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -finline-functions -funroll-loops")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fno-exceptions -fno-rtti")
    
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -falign-functions=32 -falign-loops=32")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-stack-protector")
endif()

# Enable visualization components
option(HFX_ENABLE_VISUALIZATION "Enable real-time visualization components" ON)
option(HFX_ENABLE_WEBSOCKET_SERVER "Enable WebSocket server for web dashboard" ON)
option(HFX_ENABLE_TERMINAL_DASHBOARD "Enable terminal dashboard" ON)
option(HFX_ENABLE_IMGUI_DASHBOARD "Enable ImGui native dashboard" ON)

if(HFX_ENABLE_VISUALIZATION)
    message(STATUS "üé® Visualization components enabled")
    add_compile_definitions(HFX_VISUALIZATION_ENABLED=1)
endif()

# Enable all warnings and treat as errors for production code
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter -Wno-missing-braces")

# Debug builds
if(CMAKE_BUILD_TYPE MATCHES "Debug")
    set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -fno-omit-frame-pointer")
    add_compile_definitions(HFX_DEBUG_MODE=1)
    message(STATUS "üêõ Debug mode enabled")
endif()

# Find required system libraries
find_package(PkgConfig REQUIRED)

# Handle threading
find_package(Threads REQUIRED)
if(APPLE)
    set(CMAKE_THREAD_LIBS_INIT "-lpthread")
    set(CMAKE_HAVE_THREADS_LIBRARY 1)
    set(CMAKE_USE_WIN32_THREADS_INIT 0)
    set(CMAKE_USE_PTHREADS_INIT 1)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
endif()

# Python for quantitative libraries
find_package(Python3 COMPONENTS Interpreter Development REQUIRED)
if(Python3_FOUND)
    message(STATUS "üêç Python ${Python3_VERSION} found")
endif()

# High-performance third-party libraries
set(THIRD_PARTY_DIR ${CMAKE_SOURCE_DIR}/third-party)

# Add subdirectories for each module
add_subdirectory(hfx-core)
add_subdirectory(hfx-net)
add_subdirectory(hfx-chain)
add_subdirectory(hfx-mempool)
add_subdirectory(hfx-mm)
add_subdirectory(hfx-strat)
add_subdirectory(hfx-hedge)
add_subdirectory(hfx-risk)
add_subdirectory(hfx-log)
add_subdirectory(hfx-viz)

# Main executable target
add_executable(hydraflow-x 
    main.cpp
)

# Set output directory based on architecture
if(CMAKE_OSX_ARCHITECTURES)
    set_target_properties(hydraflow-x PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
        OUTPUT_NAME "hydraflow-x"
    )
endif()

# Link all modules
target_link_libraries(hydraflow-x PRIVATE
    hfx-core
    hfx-net
    hfx-chain
    hfx-mempool
    hfx-mm
    hfx-strat
    hfx-hedge
    hfx-risk
    hfx-log
    hfx-viz
    Threads::Threads
    ${Python3_LIBRARIES}
)

# Apple-specific linking
if(APPLE)
    # Find Apple frameworks
    find_library(CORE_FOUNDATION CoreFoundation)
    find_library(IOKIT IOKit)
    find_library(SECURITY Security)
    find_library(SYSTEM_CONFIGURATION SystemConfiguration)
    find_library(ACCELERATE Accelerate)
    find_library(METAL Metal)
    find_library(METALKIT MetalKit)
    find_library(CORE_GRAPHICS CoreGraphics)
    find_library(QUARTZ_CORE QuartzCore)
    
    target_link_libraries(hydraflow-x PRIVATE
        ${CORE_FOUNDATION}
        ${IOKIT}
        ${SECURITY}
        ${SYSTEM_CONFIGURATION}
        ${ACCELERATE}
        ${CORE_GRAPHICS}
        ${QUARTZ_CORE}
    )
    
    # Only link Metal frameworks if they're available and not conflicting
    if(HFX_ENABLE_IMGUI_DASHBOARD AND METAL AND METALKIT)
        target_link_libraries(hydraflow-x PRIVATE ${METAL} ${METALKIT})
        add_compile_definitions(HFX_METAL_SUPPORT=1)
        message(STATUS "üî© Metal framework support enabled")
    endif()
endif()

# Include directories for all modules
target_include_directories(hydraflow-x PRIVATE
    ${CMAKE_SOURCE_DIR}
    ${Python3_INCLUDE_DIRS}
)

# Compile definitions
target_compile_definitions(hydraflow-x PRIVATE
    HFX_VERSION_MAJOR=1
    HFX_VERSION_MINOR=0
    HFX_VERSION_PATCH=0
    HFX_BUILD_TIMESTAMP="${CMAKE_CURRENT_TIMESTAMP}"
)

# Installation rules
install(TARGETS hydraflow-x 
    RUNTIME DESTINATION bin
    COMPONENT Runtime
)

# Copy configuration files
install(DIRECTORY configs/
    DESTINATION etc/hydraflow-x
    COMPONENT Configuration
)

# Copy web dashboard
if(EXISTS ${CMAKE_SOURCE_DIR}/web-dashboard/out)
    install(DIRECTORY ${CMAKE_SOURCE_DIR}/web-dashboard/out/
        DESTINATION share/hydraflow-x/web
        COMPONENT WebDashboard
    )
endif()

# Build summary
message(STATUS "")
message(STATUS "üöÄ HydraFlow-X Build Configuration Summary")
message(STATUS "==========================================")
message(STATUS "‚Ä¢ Target Architecture: ${HFX_TARGET_ARCH}")
message(STATUS "‚Ä¢ Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "‚Ä¢ C++ Standard: C++${CMAKE_CXX_STANDARD}")
message(STATUS "‚Ä¢ Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "‚Ä¢ Python: ${Python3_VERSION}")
message(STATUS "‚Ä¢ Visualization: ${HFX_ENABLE_VISUALIZATION}")
message(STATUS "‚Ä¢ WebSocket Server: ${HFX_ENABLE_WEBSOCKET_SERVER}")
message(STATUS "‚Ä¢ Terminal Dashboard: ${HFX_ENABLE_TERMINAL_DASHBOARD}")
message(STATUS "‚Ä¢ ImGui Dashboard: ${HFX_ENABLE_IMGUI_DASHBOARD}")
if(CMAKE_INTERPROCEDURAL_OPTIMIZATION)
    message(STATUS "‚Ä¢ Link-Time Optimization: ON")
endif()
message(STATUS "==========================================")
message(STATUS "")
